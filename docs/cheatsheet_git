$ git init              # Initialize a new git repository in current directory
$ git clone <repo>      # Clone repository to local machine
$ git status            # Current repository status


$ git add <file>            # Start tracking new file or stage modified file
$ git add .                 # Stage all changes, recursively from the path
$ git add --patch <file>    # Stage changes in file hunk by hunk


$ git rm <file>             # Stop tracking file and remove it from working directory
$ git rm --cached <file>    # Stop tracking file, but keep it in working directory
$ git mv <from> <to>        # Rename file, stage this change


$ git reset --soft <commit>     # Move HEAD to point to the <commit>
$ git reset [--mixed] <commit>  # Same but also update index with contents of HEAD
$ git reset --hard <commit>     # Same but also make working directory look like HEAD
                                # Undos all changes since last commit, destroys data in working directory
$ git reset HEAD <path>         # Copy file from HEAD to index - unstage modified file


$ git diff                  # View all unstaged changes
$ git diff --staged         # View staged changes before commiting
           --cached


$ git commit                # Commit staged changes, prompt for commit message
$ git commit -m <comment>   # Commit staged changes with one-line message
$ git commit -a             # Stage all modified tracked files and commit
$ git commit --amend        # Squash changes in index into the previous commit,
                            # useful for fixing small errors before pushing
$ git commit --amend --date=now     # Same as above, also update commit date


$ git checkout -- <file>    # Completely discard changes to file, revert back to last commit
$ git checkout <branch>     # Switch to another branch, changing files in working directory
$ git checkout -b <branch>  # Create new branch and switch to it


# Start a local branch based on the remote branch
# Creates a tracking branch, associated with remote branch
# Git will automatically know which server to fetch from and branch to merge into
$ git checkout -b <branch> <remote>/<remote-branch>
$ git checkout --track <remote>/<remote-branch>


# If the branch doesn't exist locally, but exists on the remote
# tracking branch will be created
$ git checkout <remote-branch>


$ git branch                # Show all branches
$ git branch -v             # Show all branches and their last commits
$ git branch -vv            # Show all branches, their commits, what each branch is tracking
                            # and how far ahead or behind it is
$ git branch --merged       # Show all branches merged into the current one
$ git branch --no-merged    # Show all branches not merged into the current one
$ git branch <name>         # Create new branch pointing to the current commit
$ git branch -d <branch>    # Delete branch
$ git branch -D <branch>    # Force delete branch with unmerged changes
# Delete remote branch. Git server will keep date for a while
# before garbage collection runs
$ git push <remote> --delete <branch>


$ git merge <branch>        # Merge to current branch


$ git rebase <branch>       # Reapplying changes from another branch into the current branch
                            # Useful for avoiding merge commits


$ git remote                        # Show all remotes
$ git remote -v                     # Show all remotes and their respective urls
$ git remote add <shortname> <url>  # Add new remote
$ git remote show <remote>          # Show remote info - urls, branches and such
$ git remote rename <old> <new>     # Rename a remote
$ git remote remove <remote>        # Remove remote and all remote-tracking branches


$ git push <remote> <branch>    # Upload changes
$ git pull <remote> <branch>    # Fetch and merge remote branch into current branch
$ git fetch <remote>            # Update local remote to the latest version


$ git tag                   # List all tags in alphabetical order
$ git tag -l <string>       # Search in tag names
$ git tag <name>            # Create lightweight tag for current commit
$ git tag -a <name>         # Create annotated tag for current commit, prompt for description
$ git tag -a <n> -m <comment>   # As above, but with one-line description
$ git tag <name> <commit>       # Tag can be applied to any past commit
$ git show <tag>                # Show info about tag
$ git push <remote> <tag>       # Explicitly push tags to the remote
$ git push <remote> --tags      # Push all tags to the remote
$ git checkout <tag>            # View versions of files a tag is pointing to,
                                # puts repo in "detached HEAD" state


$ git stash                 # Stash dirty working directory (all unstaged and staged for commit changes)
$ git stash --patch         # Stash hunk by hunk
$ git stash list            # Show all stashes
$ git stash apply           # Reapply most recent stash
$ git stash apply <stash>   # Reapply specific stash from stack
$ git stash drop <stash>    # Remove stash
$ git stash pop             # Reapply and drop stash
$ git stash --keep-index    # Leave staged content in the index
$ git stash -u              # Include untracked files in the stash
$ git stash branch <branch> # Create new branch with stashed changes on top of
                              stash parent commit and drop the stash


$ git clean -f              # Remove untracked files from working directory
$ git clean -i              # Interactive removing
$ git clean -d              # Remove untracked directories too
$ git clean -n              # Do a dry-run, dot actually remove anything
$ git clean -x              # Remove ignored files too


$ git log                       # Show commits chronologically
$ git log -<number>             # Show only n latest commits
$ git log --since=2.weeks       # Time-limiting option - after certain date
$ git log --until=<YYYY-MM-DD>  # Date can also be relative as "1 year 3 days ago"
$ git log --grep=<string>       # Search for specific word in commit messages
$ git log -S <string>           # Show commits that changed the number of occurences of string
$ git log -G <string>           # Same but using regex
$ git log -p                    # Show commits with diffs included
$ git log --stat                # Show commits with summary of changes
$ git log --decorate            # Show ref names for commits
$ git log --graph               # Show commits as graph
$ git log --pretty=oneline      # Other formats [short | full | fuller]


$ git grep <search>         # Search working directory
$ git grep -n <search>      # Print line numbers
$ git grep -c <search>      # Show summary - number of matches per file
$ git grep -p <search>      # Show function name in which match occured


# Hash, author date, comment, commit decorations, author name.
# Shows commits as a graph, with short date format, one commit per line
$ git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short


$ git config --list             # List all settings for repo
$ git config user.name <name>   # Set user name for current repo
$ git config user.email <name>  # Set user email for current repo
$ git config core.editor <ed>   # Set default text editor for current repo
$ git config diff.tool vimdiff  # Set tool for difftool command
$ git config --add difftool.prompt false    # Disable difftool prompt
$ git config --global user.name <name>      # Settings can be set globally for all repos
                                            # without local settings


---Difference between reset and checkout---
REF means that command moves reference (branch) that HEAD points to
and HEAD means that HEAD itself is moved.
================================================================
                                HEAD    Index   WD      WD Safe?
================================================================
COMMIT LEVEL
reset --soft [commit]           REF     NO      NO      YES
reset [commit]                  REF     YES     NO      YES
reset --hard [commit]           REF     YES     YES     NO
checkout <commit>               HEAD    YES     YES     YES

FILE LEVEL
reset [commit] <paths>          NO      YES     NO      YES
checkout [commit] <paths>       NO      YES     YES     NO


---Examples of aliases for common commands---
$ git config --global alias.co  checkout
$ git config --global alias.br  branch
$ git config --global alias.st  status
$ git config --global alias.unstage 'reset HEAD --'
$ git config --global alias.last 'log -1 head'
$ git config --global alias.visual '!gitk'


---GitHub - new repo---
1. Create repo on github
2. Go to local repo folder
3. Add a remote named origin
    $ git remote add origin git@github.com:<user>/<repo>.git
4. Push commits in master branch
    $ git push -u origin master
5. To pull changes from the origin repo:
    $ git pull origin master


---GitHub - start editing published repo---
1. Clone origin
    $ git clone <repo>
2. Configure user credentials for proper logging of changes
   and mask real email with the one provided by github
    $ cd <repo folder>
    $ git config user.name <username_on_github>
    $ git config user.email <username_on_github>@users.noreply.github.com

