------------
---pacman---
------------
$ pacman -S FOO		# Install package FOO
$ pacman -Sg gnome	# See what packages belong to the gnome group
$ pacman -Ss FOO	# Search for FOO in package database
$ pacman -Qs FOO	# Search for already installed packages
$ pacman -Si FOO	# Display information about package
$ pacman -Qi FOO	# Display information about installed package
$ pacman -Qii FOO	# Same as above + information about backup files
$ pacman -Ql FOO	# Retrieve list of the files installed by package
$ pacman -Qo ./file	# Query the database to see which package
                    # a file in the system belongs to
$ pacman -Qdt		# List orphaned packages
$ pacman -Syu		# Update all packages
$ pacman -Syu FOO	# Update all packages and then install new ones
$ pacman -Sw FOO	# Download package without installing it
$ pacman -Sc		# Clean package cache of packages
                    # that are not currently installed
$ pacman -Scc		# Clear entire package cache
$ pacman -U ./FOO	# Install localy built packages
$ pacman -R FOO		# Remove package
$ pacman -Rs FOO	# Remove package and any of its dependancies
                    # which are not required by any other package
$ pacman -Rs $(pacman -Qdtq)	# Remove all orphaned packages
$ pacman -Rn FOO	# Remove package without creating .pacsave backups
$ pacman -Qm		# List all foreign (AUR) packages
$ pactree FOO		# List dependency tree of a package
$ whoneeds FOO		# List packages depending on a FOO

# Do not refresh the package list without upgrading system
# Like "pacman -Sy FOO" or "pacman -Sy; pacman -S FOO"
# This can lead to dependency issues

------------
---yaourt---
------------
$ yaourt FOO		# Search/install package from AUR
$ yaourt -Syua		# Upgrade all packages, including foreign
$ yaourt -C         # Manage *.pac* files

------------------------------
---Cyrillic font in console---
------------------------------
$ setfont ter-v16v

---------
---Git---
---------
$ git init                     # Initialize a new git repository
$ git clone <repo>             # Clone repository to local machine
$ git status                   # Current repository status
$ git log                      # Show commit history
$ git add <file>               # Add new file, "stage" it.
$ git add .                    # "Stage" all changes
$ git commit -a -m "comment"   # "Stage" and commit all changes (locally)
$ git push origin master       # Upload changes
$ git pull origin master       # Download changes
$ git checkout <file>          # Revert changes in file to last commit

1. Create repo on github
2. Go to local repo folder
3. Add a remote named origin
    $ git remote add origin git@github.com:<user>/<repo>.git
4. Push commits in master branch
    $ git push -u origin master
5. To pull changes from the origin repo:
    $ git pull origin master

----------
---Time---
----------
$ ntpd -ds      # Sync time without starting NTP daemon
$ hwclock -w    # Save updated time in hardware clock

--------------
---Wireless---
--------------
$ iw dev wlan0 link			# Getting status of wlan0
$ sudo iw dev wlan0 scan | less		# Scan wireless access points
$ iw wlan0 set channel auto		# Automatic WLAN channel selection (interface must be down)
$ iw wlan0 connect SSID			# Connect to access point without encryption
$ iw wlan0 connest SSID 2432		# Connect to AP on frequency 2432
$ iw wlan0 connect SSID keys 0:abcde d:1:0011223344	# Connect to AP using WEP
$ iw wlan0 disconnect			# Disconnect from current network
---for DHCP---
$ dhcpcd wlan0
---for static---
$ ip addr add 192.168.0.2/24 dev wlan0
$ ip route add default via 192.168.0.1

--------------
---Touchpad---
--------------
$ synclient TouchpadOff=1	# Disable touchpad using synaptics

-----------
---Video---
-----------
$ mplayer tv:// -tv driver=v4l2:width=640:height=480:device=/dev/video0

-----------------------
---Where the shit at---
-----------------------
/var/log/pacman.log	# Logged pacman's output

# Mount block device
udisksctl mount --block-device /dev/sdb1
udisksctl unmount --block-device /dev/sdb1

# Convert text files to utf-8 encoding
enca -L ru -c -x UTF-8 *.txt

# Preload library
LD_PRELOAD=/path/to/my/malloc.so /bin/ls

# Check needed libraries
ldd ./program

# Search for file in repository
pkgfile -s libz.so.1

# Restart program and free terminal
(tint2 & sleep 5s) & exit

# Record desktop
ffmpeg -f x11grab -s 1680x1050 -r 8 -i :0.0 -qscale 0 film.mkv

# Get list of formats from youtube video
youtube-dl -F URL
# Download video in max quality
youtube-dl --max-quality FORMAT -t URL
