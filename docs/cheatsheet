------------
---pacman---
------------
$ pacman -S FOO     # Install package FOO
$ pacman -Sg gnome  # See what packages belong to the gnome group
$ pacman -Ss FOO    # Search for FOO in package database
$ pacman -Qs FOO    # Search for already installed packages
$ pacman -Si FOO    # Display information about package
$ pacman -Qi FOO    # Display information about installed package
$ pacman -Qii FOO   # Same as above + information about backup files
$ pacman -Ql FOO    # Retrieve list of the files installed by package
$ pacman -Qo ./file # Query the database to see which package
                    # a file in the system belongs to
$ pacman -Qdt       # List orphaned packages
$ pacman -Syu       # Update all packages
$ pacman -Syu FOO   # Update all packages and then install new ones
$ pacman -Sw FOO    # Download package without installing it
$ pacman -Sg FOO    # View all packages in a specified group
$ pacman -Sc        # Clean package cache of packages
                    # that are not currently installed
$ pacman -Scc       # Clear entire package cache
$ pacman -U ./FOO   # Install localy built packages
$ pacman -R FOO     # Remove package
$ pacman -Rs FOO    # Remove package and any of its dependancies
                    # which are not required by any other package
$ pacman -Rs $(pacman -Qdtq)    # Remove all orphaned packages
$ pacman -Rn FOO    # Remove package without creating .pacsave backups
$ pacman -Qm        # List all foreign (AUR) packages
$ pactree FOO       # List dependency tree of a package
$ whoneeds FOO      # List packages depending on a FOO

# Do not refresh the package list without upgrading system
# Like "pacman -Sy FOO" or "pacman -Sy; pacman -S FOO"
# This can lead to dependency issues

---------
---Git---
---------
$ git init              # Initialize a new git repository in current directory
$ git clone <repo>      # Clone repository to local machine
$ git status            # Current repository status

$ git add <file>            # Start tracking new file or stage modified file
$ git add .                 # Stage all changes, recursively from the path
$ git add --patch <file>    # Stage changes in file hunk by hunk

$ git reset HEAD <file>     # Unstage modified file
$ git checkout -- <file>    # Completely discard changes to file, revert back to last commit
$ git reset --hard          # Undo all changes since last commit
$ git rm <file>             # Stop tracking file and remove it from working directory
$ git rm --cached <file>    # Stop tracking file, but keep it in working directory
$ git mv <from> <to>        # Rename file, stage this change

$ git diff                  # View all unstaged changes
$ git diff --staged         # View staged changes before commiting
           --cached

$ git commit                # Commit staged changes, prompt for commit message
$ git commit -m <comment>   # Commit staged changes with one-line message
$ git commit -a             # Stage all modified tracked files and commit
$ git commit --amend        # Squash changes in index into the previous commit,
                            # useful for fixing small errors before pushing
$ git commit --amend --date=now     # Same as above, also update commit date

$ git checkout <branch>     # Switch to another branch, changing files in working directory
$ git checkout -b <branch>  # Create new branch and switch to it

# Start a local branch based on the remote branch
# Creates a tracking branch, associated with remote branch
# Git will automatically know which server to fetch from and branch to merge into
$ git checkout -b <branch> <remote>/<remote-branch>
$ git checkout --track <remote>/<remote-branch>

# If the branch doesn't exist locally, but exists on the remote
# tracking branch will be created
$ git checkout <remote-branch>

$ git branch                # Show all branches
$ git branch -v             # Show all branches and their last commits
$ git branch -vv            # Show all branches, their commits, what each branch is tracking
                            # and how far ahead or behind it is
$ git branch --merged       # Show all branches merged into the current one
$ git branch --no-merged    # Show all branches not merged into the current one
$ git branch <name>         # Create new branch pointing to the current commit
$ git branch -d <branch>    # Delete branch
$ git branch -D <branch>    # Force delete branch with unmerged changes
# Delete remote branch. Git server will keep date for a while
# before garbage collection runs
$ git push <remote> --delete <branch>

$ git merge <branch>        # Merge to current branch

$ git rebase <branch>       # Reapplying changes from another branch into the current branch
                            # Useful for avoiding merge commits

$ git remote                        # Show all remotes
$ git remote -v                     # Show all remotes and their respective urls
$ git remote add <shortname> <url>  # Add new remote
$ git remote show <remote>          # Show remote info - urls, branches and such
$ git remote rename <old> <new>     # Rename a remote
$ git remote remove <remote>        # Remove remote and all remote-tracking branches

$ git push <remote> <branch>    # Upload changes
$ git pull <remote> <branch>    # Fetch and merge remote branch into current branch
$ git fetch <remote>            # Update local remote to the latest version

$ git tag                   # List all tags in alphabetical order
$ git tag -l <string>       # Search in tag names
$ git tag <name>            # Create lightweight tag for current commit
$ git tag -a <name>         # Create annotated tag for current commit, prompt for description
$ git tag -a <n> -m <comment>   # As above, but with one-line description
$ git tag <name> <commit>       # Tag can be applied to any past commit
$ git show <tag>                # Show info about tag
$ git push <remote> <tag>       # Explicitly push tags to the remote
$ git push <remote> --tags      # Push all tags to the remote
$ git checkout <tag>            # View versions of files a tag is pointing to,
                                # puts repo in "detached HEAD" state

$ git log                       # Show commits chronologically
$ git log -<number>             # Show only n latest commits
$ git log --since=2.weeks       # Time-limiting option - after certain date
$ git log --until=<YYYY-MM-DD>  # Date can also be relative as "1 year 3 days ago"
$ git log --grep=<string>       # Search for specific word in commit messages
$ git log -S <string>           # Show commits that changed the number of occurences of string
$ git log -p                    # Show commits with diffs included
$ git log --stat                # Show commits with summary of changes
$ git log --decorate            # Show ref names for commits
$ git log --graph               # Show commits as graph
$ git log --pretty=oneline      # Other formats [short | full | fuller]

# Hash, author date, comment, commit decorations, author name.
# Shows commits as a graph, with short date format, one commit per line
$ git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short

$ git config --list             # List all settings for repo
$ git config user.name <name>   # Set user name for current repo
$ git config user.email <name>  # Set user email for current repo
$ git config core.editor <ed>   # Set default text editor for current repo
$ git config diff.tool vimdiff  # Set tool for difftool command
$ git config --add difftool.prompt false    # Disable difftool prompt
$ git config --global user.name <name>      # Settings can be set globally for all repos
                                            # without local settings

---Examples of aliases for common commands---
$ git config --global alias.co  checkout
$ git config --global alias.br  branch
$ git config --global alias.st  status
$ git config --global alias.unstage 'reset HEAD --'
$ git config --global alias.last 'log -1 head'
$ git config --global alias.visual '!gitk'

---GitHub - new repo---
1. Create repo on github
2. Go to local repo folder
3. Add a remote named origin
    $ git remote add origin git@github.com:<user>/<repo>.git
4. Push commits in master branch
    $ git push -u origin master
5. To pull changes from the origin repo:
    $ git pull origin master

---GitHub - start editing published repo---
1. Clone origin
    $ git clone <repo>
2. Configure user credentials for proper logging of changes
   and mask real email with the one provided by github
    $ cd <repo folder>
    $ git config user.name <username_on_github>
    $ git config user.email <username_on_github>@users.noreply.github.com

----------
---tmux---
----------
$ tmux new-sesion -s 'my project'   # Creating named session
$ tmux -L moo                       # Create or attach to a session "moo"
$ tmux -L moo attach                # Attach to a session "moo"

Prefix + $      # Rename current session
Prefix + (      # Switch to the previous session
Prefix + )      # Switch to the next session
Prefix + L      # Switch to the last session
Prefix + s      # Interactive session switch

Prefix + ,      # Rename current window
Prefix + p      # Swith to the previous window
Prefix + n      # Swith to the next window
Prefix + l      # Switch to the last window
Prefix + w      # Interactive windows switch
Prefix + 1      # Switch to the first window
Prefix + 2      # Switch to the second window and so on...
Prefix + '      # Switch to the window with index greater than 9
Prefix + f      # Switch to the windows by name
Prefix + c      # Create new window at the first open index
Prefix + .      # Prompt for an index to move current window to

Prefix + space  # Switch layout of panes

1. To copy text between tmux panes press
   Prefix + [
2. Navigate to start of the selection with hjkl
3. Start selection with v
4. Yank selection with y

--------------
---rtorrent---
--------------
<Enter>         # Add .torrent file, doesn't start automatically
<Backspace>     # Add .torrent file, start downloading
<Ctrl + s>      # Start download
<Ctrl + d>      # Stop active, remove stopped
<Ctrl + k>      # Stop and close file of active download
<Ctrl + r>      # Re-hash, download missing
<Ctrl + q>      # Exit. Double tap to exit immediately

----------
---Time---
----------
$ ntpd -ds      # Sync time without starting NTP daemon
$ hwclock -w    # Save updated time in hardware clock

--------------
---Wireless---
--------------
$ iw dev WI-FI link             # Getting status of wlan0
# ip link set WI-FI up          # Enable specified interface
$ sudo iw dev WI-FI scan | less # Scan wireless access points
$ iw WI-FI set channel auto     # Automatic channel selection (interface must be down)
$ iw WI-FI connect SSID         # Connect to access point without encryption
$ iw WI-FI connest SSID 2432    # Connect to AP on frequency 2432
$ iw WI-FI connect SSID keys 0:abcde d:1:0011223344     # Connect to AP using WEP
$ iw WI-FI disconnect           # Disconnect from current network
---Wireless using netctl profiles
$ netctl start PROFILENAME      # Connect using specified profile
                                # Profiles are stored in "/etc/netctl"
                                # Examples are in "etc/netctl/examples"
---for DHCP---
$ dhcpcd wlan0
---for static---
    # DNS addresses are added in /etc/resolv.conf
$ ip link set IF up
$ ip addr add 192.168.0.2/24 dev wlan0
$ ip route add default via 192.168.0.1
---flush assigned ip and gateway---
$ ip addr flush dev IF
$ ip route flush dev IF

-----------------
---Taskwarrior---
-----------------
$ task add Some task      # Add task to taskwarrior
$ task list               # Show tasks
$ task ID done            # Finish task with id 3
$ task ID start           # Mark task as started

---------
---SQL---
---------
$ systemctl start mariadb   # to start sql server
$ mysql -u root -p          # to connect to the sql server

----------------
---Copy-Paste---
----------------
$ cat FILE.TXT | xsel -i    # Copy piped text into X buffer
$ xsel -o > FILE.TXT        # Paste from X buffer

--------------
---Touchpad---
--------------
# xinput                # To find touchpad name and id
$ xinput disable "SynPS/2 Synaptics TouchPad"       # Disable touchpad by name
$ xinput --list-props "SynPS/2 Synaptics TouchPad"  # View all properties

-----------
---Video---
-----------
$ mplayer tv:// -tv driver=v4l2:width=640:height=480:device=/dev/video0

-----------
---Audio---
-----------
# flac to wav
for i in *.flac ; do flac -d $i ; done

# wav to hq variable bitrate mp3
for i in *.wav ; do lame -V 0 $i ; done

-----------
---Logs----
-----------
/var/log/pacman.log     # Logged pacman's output

-------------------
---Naked console---
-------------------
$ setfont cyr-sun16     # Change console font to one that supports cyrillic

----------
---Misc---
----------
# Mount block device
udisksctl mount --block-device /dev/sdb1
udisksctl unmount --block-device /dev/sdb1

# Convert text files to utf-8 encoding
enca -L ru -c -x UTF-8 *.txt

# Preload library
LD_PRELOAD=/path/to/my/malloc.so /bin/ls
LD_LIBRARY_PATH=/path/to/libs ./program

# Check needed libraries
ldd ./program

# Start program and free terminal
(tint2 & sleep 5s) & exit

# Record desktop
ffmpeg -f x11grab -s 1680x1050 -r 8 -i :0.0 -qscale 0 film.mkv

# Get list of formats from youtube video
youtube-dl -F URL
# Download video in max quality
youtube-dl --max-quality FORMAT -t URL

# Auto-zoom, fullscreen, recursive, random order in feh
feh -ZFrz .

